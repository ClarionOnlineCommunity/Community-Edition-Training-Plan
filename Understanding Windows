Understanding Windows.

TL;DR
So pretty much all modern Operating Systems are loops running loops running loops. 

The very first loop is the operating system itself, handling messages in order to provide a structured framework that lets other people like you or me add their own loops to. Some of those loops are a program handling messages which describe events, some of those loops are windows running on their own or inside a program loop, handling messages relevant to that loop, like window drawing and moving messages.

OS Loop's handle Hardware Interupt ReQuest's (IRQ)'s and driver messages which can be simple action messages or messages with data to process in or out of the system, sometimes with direct access bypassing the OS loop to control other parts of a computers hardware, like direct read/writes to ram (memory), disk, printers, camera's, speakers, bluetooth devices.
Application/Program Loops handle OS/System defined messages and application defined messages. Can also have its own window attached to the application thread.
Threads (like mini Applications/Programs/Processes (but not to be confused with a Process) have their own loop which slides up and down or left to right along the thread (depending on your point of view) for every window that opens and closes.

The Long Form.
******** Operating System Loop Level
https://en.wikipedia.org/wiki/Event_loop
https://en.wikipedia.org/wiki/Message_loop_in_Microsoft_Windows
"Modern graphical interface frameworks, such as Windows Forms, Windows Presentation Foundation, MFC, Delphi, Qt, and others do not require applications to code a Windows message loop, because they automatically route events such as key presses and mouse clicks to their appropriate handlers as defined within the framework. However, each framework implements a message loop somewhere, and the message loop can usually be accessed or replaced when more direct control is required."
The above statement applies to Clarion. The clarion runtime has the message loop processor and its called the Accept() Loop where all your event handling code goes inside. The templates structure this loop into easy to navigate sections called Embeds. 



About Windows 
https://docs.microsoft.com/en-us/windows/win32/winmsg/about-windows#desktop-window
"Desktop Window
When you start the system, it automatically creates the desktop window. The desktop window is a system-defined window that paints the background of the screen and serves as the base for all windows displayed by all applications.
The desktop window uses a bitmap to paint the background of the screen. The pattern created by the bitmap is called the desktop wallpaper. By default, the desktop window uses the bitmap from a .bmp file specified in the registry as the desktop wallpaper."

https://docs.microsoft.com/en-us/windows/win32/winmsg/about-messages-and-message-queues
"Unlike MS-DOS-based applications, Windows-based applications are event-driven. They do not make explicit function calls (such as C run-time library calls) to obtain input. Instead, they wait for the system to pass input to them.

The system passes all input for an application to the various windows in the application. Each window has a function, called a window procedure, that the system calls whenever it has input for the window. The window procedure processes the input and returns control to the system. For more information about window procedures, see Window Procedures.

If a top-level window stops responding to messages for more than several seconds, the system considers the window to be not responding. In this case, the system hides the window and replaces it with a ghost window that has the same Z order, location, size, and visual attributes. This allows the user to move it, resize it, or even close the application. However, these are the only actions available because the application is actually not responding. When in the debugger mode, the system does not generate a ghost window."

https://docs.microsoft.com/en-us/windows/win32/winmsg/about-messages-and-message-queues#system-defined-messages
"The system sends or posts a system-defined message when it communicates with an application. It uses these messages to control the operations of applications and to provide input and other information for applications to process. An application can also send or post system-defined messages. Applications generally use these messages to control the operation of control windows created by using preregistered window classes.

Each system-defined message has a unique message identifier and a corresponding symbolic constant (defined in the software development kit (SDK) header files) that states the purpose of the message. For example, the WM_PAINT constant requests that a window paint its contents.

Symbolic constants specify the category to which system-defined messages belong. The prefix of the constant identifies the type of window that can interpret and process the message. Following are the prefixes and their related message categories."


******** Application/Program/Process Loop level
https://docs.microsoft.com/en-us/windows/win32/winmsg/windows
"In a graphical Windows-based application, a window is a rectangular area of the screen where the application displays output and receives input from the user. Therefore, one of the first tasks of a graphical Windows-based application is to create a window.
A window shares the screen with other windows, including those from other applications. Only one window at a time can receive input from the user. The user can use the mouse, keyboard, or other input device to interact with this window and the application that owns it."

https://docs.microsoft.com/en-us/windows/win32/winmsg/about-windows#application-windows
"Every graphical Windows-based application creates at least one window, called the main window, that serves as the primary interface between the user and the application. Most applications also create other windows, either directly or indirectly, to perform tasks related to the main window. Each window plays a part in displaying output and receiving input from the user.

When you start an application, the system also associates a taskbar button with the application. The taskbar button contains the program icon and title. When the application is active, its taskbar button is displayed in the pushed state.

An application window includes elements such as a title bar, a menu bar, the window menu (formerly known as the system menu), the minimize button, the maximize button, the restore button, the close button, a sizing border, a client area, a horizontal scroll bar, and a vertical scroll bar. An application's main window typically includes all of these components. The following illustration shows these components in a typical main window."

https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-winmain
"WinMain is the conventional name used for the application entry point"

https://docs.microsoft.com/en-us/windows/win32/procthread/processes-and-threads
"An application consists of one or more processes. A process, in the simplest terms, is an executing program. One or more threads run in the context of the process. A thread is the basic unit to which the operating system allocates processor time. A thread can execute any part of the process code, including parts currently being executed by another thread.

A job object allows groups of processes to be managed as a unit. Job objects are namable, securable, sharable objects that control attributes of the processes associated with them. Operations performed on the job object affect all processes associated with the job object.

A thread pool is a collection of worker threads that efficiently execute asynchronous callbacks on behalf of the application. The thread pool is primarily used to reduce the number of application threads and provide management of the worker threads.

A fiber is a unit of execution that must be manually scheduled by the application. Fibers run in the context of the threads that schedule them.

User-mode scheduling (UMS) is a lightweight mechanism that applications can use to schedule their own threads. UMS threads differ from fibers in that each UMS thread has its own thread context instead of sharing the thread context of a single thread."

https://docs.microsoft.com/en-us/windows/win32/procthread/about-processes-and-threads
"Each process provides the resources needed to execute a program. A process has a virtual address space, executable code, open handles to system objects, a security context, a unique process identifier, environment variables, a priority class, minimum and maximum working set sizes, and at least one thread of execution. Each process is started with a single thread, often called the primary thread, but can create additional threads from any of its threads.

A thread is the entity within a process that can be scheduled for execution. All threads of a process share its virtual address space and system resources. In addition, each thread maintains exception handlers, a scheduling priority, thread local storage, a unique thread identifier, and a set of structures the system will use to save the thread context until it is scheduled. The thread context includes the thread's set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread's process. Threads can also have their own security context, which can be used for impersonating clients.

Microsoft Windows supports preemptive multitasking, which creates the effect of simultaneous execution of multiple threads from multiple processes. On a multiprocessor computer, the system can simultaneously execute as many threads as there are processors on the computer.

A job object allows groups of processes to be managed as a unit. Job objects are namable, securable, sharable objects that control attributes of the processes associated with them. Operations performed on the job object affect all processes associated with the job object."


https://docs.microsoft.com/en-us/windows/win32/winmsg/using-messages-and-message-queues#creating-a-message-loop
"The system does not automatically create a message queue for each thread. Instead, the system creates a message queue only for threads that perform operations which require a message queue. If the thread creates one or more windows, a message loop must be provided; this message loop retrieves messages from the thread's message queue and dispatches them to the appropriate window procedures.

Because the system directs messages to individual windows in an application, a thread must create at least one window before starting its message loop. Most applications contain a single thread that creates windows. A typical application registers the window class for its main window, creates and shows the main window, and then starts its message loop — all in the WinMain function."



https://docs.microsoft.com/en-us/windows/win32/winmsg/about-messages-and-message-queues#application-defined-messages
"An application can create messages to be used by its own windows or to communicate with windows in other processes. If an application creates its own messages, the window procedure that receives them must interpret the messages and provide appropriate processing."


Messages are also grouped into smaller subsections, so events spefically related to the functionality of a button control can be seen here 
https://docs.microsoft.com/en-us/windows/win32/controls/bumper-button-control-reference-messages
https://docs.microsoft.com/en-us/windows/win32/controls/bumper-button-control-reference-notifications

Messages fall into specific group or subsection, some messages relevant to a running application/program/process and some messages relevant to the functionality of windows itself or one or more screen controls laid onto the windop.




























